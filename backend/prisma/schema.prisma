generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model categories {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  name       String    @db.VarChar(255)
  slug       String    @db.VarChar(255)
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
  deleted_at DateTime? @db.Timestamp(0)
  courses    courses[]
}

model chapters {
  id                    BigInt                  @id @default(autoincrement()) @db.UnsignedBigInt
  name                  String                  @db.VarChar(255)
  course_id             BigInt                  @db.UnsignedBigInt
  created_at            DateTime?               @db.Timestamp(0)
  updated_at            DateTime?               @db.Timestamp(0)
  deleted_at            DateTime?               @db.Timestamp(0)
  courses               courses                 @relation(fields: [course_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "chapters_course_id_foreign")
  lessons               lessons[]
  user_lessons_progress user_lessons_progress[]

  @@index([course_id], map: "chapters_course_id_foreign")
}

model courses {
  id               BigInt          @id @default(autoincrement()) @db.UnsignedBigInt
  name             String          @db.VarChar(255)
  description      String          @db.Text
  thumbnail        String?         @db.VarChar(255)
  price            String?         @default("0") @db.VarChar(255)
  status           courses_status  @default(draft)
  category_id      BigInt          @db.UnsignedBigInt
  level            courses_level   @default(Beginner)
  certification    Boolean         @default(false)
  type             courses_type
  discount_price   String?         @db.VarChar(255)
  graduation_count String?         @db.VarChar(255)
  quizzes_count    String?         @db.VarChar(255)
  lessons_count    String?         @db.VarChar(255)
  deleted_at       DateTime?       @db.Timestamp(0)
  created_at       DateTime?       @db.Timestamp(0)
  updated_at       DateTime?       @db.Timestamp(0)
  chapters         chapters[]
  categories       categories      @relation(fields: [category_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "courses_category_id_foreign")
  enrollments      enrollments[]
  image_courses    image_courses[]
  my_courses       my_courses[]
  reviews          reviews[]
  subscriptions    subscriptions[]

  @@index([category_id], map: "courses_category_id_foreign")
}

model enrollments {
  id         BigInt             @id @default(autoincrement()) @db.UnsignedBigInt
  user_id    BigInt             @db.UnsignedBigInt
  course_id  BigInt             @db.UnsignedBigInt
  progress   Int                @default(0)
  status     enrollments_status @default(inprogress)
  created_at DateTime?          @db.Timestamp(0)
  updated_at DateTime?          @db.Timestamp(0)
  courses    courses            @relation(fields: [course_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "enrollments_course_id_foreign")
  users      users              @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "enrollments_user_id_foreign")

  @@index([course_id], map: "enrollments_course_id_foreign")
  @@index([user_id], map: "enrollments_user_id_foreign")
}

model event_mentors {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  event_id   BigInt    @db.UnsignedBigInt
  mentor_id  BigInt    @db.UnsignedBigInt
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
  events     events    @relation(fields: [event_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "event_mentors_event_id_foreign")
  users      users     @relation(fields: [mentor_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "event_mentors_mentor_id_foreign")

  @@index([event_id], map: "event_mentors_event_id_foreign")
  @@index([mentor_id], map: "event_mentors_mentor_id_foreign")
}

model event_transactions {
  id             BigInt                    @id @default(autoincrement()) @db.UnsignedBigInt
  event_id       BigInt                    @db.UnsignedBigInt
  user_id        BigInt                    @db.UnsignedBigInt
  transaction_id String?                   @db.VarChar(255)
  status         event_transactions_status @default(pending)
  created_at     DateTime?                 @db.Timestamp(0)
  updated_at     DateTime?                 @db.Timestamp(0)
  events         events                    @relation(fields: [event_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "event_transactions_event_id_foreign")
  users          users                     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "event_transactions_user_id_foreign")

  @@index([event_id], map: "event_transactions_event_id_foreign")
  @@index([user_id], map: "event_transactions_user_id_foreign")
}

model event_users {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  user_id    BigInt    @db.UnsignedBigInt
  event_id   BigInt    @db.UnsignedBigInt
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
  deleted_at DateTime? @db.Timestamp(0)
  events     events    @relation(fields: [event_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "event_users_event_id_foreign")
  users      users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "event_users_user_id_foreign")

  @@index([event_id], map: "event_users_event_id_foreign")
  @@index([user_id], map: "event_users_user_id_foreign")
}

model events {
  id                 BigInt               @id @default(autoincrement()) @db.UnsignedBigInt
  title              String               @db.VarChar(255)
  location           String               @db.VarChar(255)
  description        String?              @db.Text
  event_date         DateTime?            @db.Date
  start_time         DateTime?            @db.Time(0)
  end_time           DateTime?            @db.Time(0)
  certification      Boolean              @default(true)
  price              Decimal?             @db.Decimal(8, 2)
  image              String?              @db.VarChar(255)
  total_seat         Int?                 @default(50)
  is_online          Boolean              @default(false)
  google_maps_link   String?              @db.VarChar(500)
  deleted_at         DateTime?            @db.Timestamp(0)
  created_at         DateTime?            @db.Timestamp(0)
  updated_at         DateTime?            @db.Timestamp(0)
  online_link        String?              @db.VarChar(500)
  online_platform    String?              @db.VarChar(50)
  event_mentors      event_mentors[]
  event_transactions event_transactions[]
  event_users        event_users[]
}

model faqs {
  id           BigInt            @id @default(autoincrement()) @db.UnsignedBigInt
  product_id   BigInt            @default(0) @db.UnsignedBigInt
  product_type faqs_product_type @default(bootcamp)
  question     String            @db.VarChar(100)
  answer       String            @db.VarChar(255)
  created_at   DateTime          @db.Timestamp(0)
  updated_at   DateTime?         @db.Timestamp(0)
}

model image_courses {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  course_id  BigInt    @db.UnsignedBigInt
  image      String    @db.VarChar(255)
  deleted_at DateTime? @db.Timestamp(0)
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
  courses    courses   @relation(fields: [course_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "image_courses_course_id_foreign")

  @@index([course_id], map: "image_courses_course_id_foreign")
}

model lessons {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  name       String    @db.Text
  video      String?   @db.VarChar(255)
  chapter_id BigInt    @db.UnsignedBigInt
  content    String    @db.Text
  deleted_at DateTime? @db.Timestamp(0)
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
  chapters   chapters  @relation(fields: [chapter_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "lessons_chapter_id_foreign")

  @@index([chapter_id], map: "lessons_chapter_id_foreign")
}

model mentors {
  id               BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  user_id          BigInt    @db.UnsignedBigInt
  profession       String?   @db.VarChar(255)
  expertise        String    @db.VarChar(255)
  experience_years String    @db.VarChar(255)
  created_at       DateTime? @db.Timestamp(0)
  updated_at       DateTime? @db.Timestamp(0)
  deleted_at       DateTime? @db.Timestamp(0)
  users            users     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "mentors_user_id_foreign")

  @@index([user_id], map: "mentors_user_id_foreign")
}

model migrations {
  id        Int    @id @default(autoincrement()) @db.UnsignedInt
  migration String @db.VarChar(255)
  batch     Int
}

model my_courses {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  course_id  BigInt    @db.UnsignedBigInt
  user_id    Int
  deleted_at DateTime? @db.Timestamp(0)
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
  courses    courses   @relation(fields: [course_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "my_courses_course_id_foreign")

  @@unique([course_id, user_id], map: "my_courses_course_id_user_id_unique")
}

model password_reset_tokens {
  email      String    @id @db.VarChar(255)
  token      String    @db.VarChar(255)
  created_at DateTime? @db.Timestamp(0)
}

model permissions {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  name       String    @db.VarChar(255)
  guard_name String    @db.VarChar(255)
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)

  @@unique([name, guard_name], map: "permissions_name_guard_name_unique")
}

model reviews {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  user_id    Int
  course_id  BigInt    @db.UnsignedBigInt
  rating     Int       @default(1)
  note       String?   @db.LongText
  deleted_at DateTime? @db.Timestamp(0)
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
  courses    courses   @relation(fields: [course_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "reviews_course_id_foreign")

  @@unique([course_id, user_id], map: "reviews_course_id_user_id_unique")
}

model roles {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  name       String    @db.VarChar(255)
  guard_name String    @db.VarChar(255)
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)

  @@unique([name, guard_name], map: "roles_name_guard_name_unique")
}

model subscriptions {
  id             BigInt               @id @default(autoincrement()) @db.UnsignedBigInt
  course_id      BigInt               @db.UnsignedBigInt
  user_id        BigInt               @db.UnsignedBigInt
  amount         String               @db.VarChar(255)
  payment_method String               @db.VarChar(255)
  status         subscriptions_status
  expires_at     DateTime             @db.DateTime(0)
  created_at     DateTime?            @db.Timestamp(0)
  updated_at     DateTime?            @db.Timestamp(0)
  courses        courses              @relation(fields: [course_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "subscriptions_course_id_foreign")
  users          users                @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "subscriptions_user_id_foreign")

  @@index([course_id], map: "subscriptions_course_id_foreign")
  @@index([user_id], map: "subscriptions_user_id_foreign")
}

model user_lessons_progress {
  id          BigInt                       @id @default(autoincrement()) @db.UnsignedBigInt
  user_id     BigInt                       @db.UnsignedBigInt
  chapters_id BigInt                       @db.UnsignedBigInt
  status      user_lessons_progress_status
  created_at  DateTime                     @default(now()) @db.DateTime(0)
  updated_at  DateTime?                    @db.DateTime(0)
  chapters    chapters                     @relation(fields: [chapters_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "user_lessons_progress_chapters_FK")
  users       users                        @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "user_lessons_progress_users_FK")

  @@index([chapters_id], map: "user_lessons_progress_chapters_FK")
  @@index([user_id], map: "user_lessons_progress_users_FK")
}

model users {
  id                    BigInt                  @id @default(autoincrement()) @db.UnsignedBigInt
  name                  String                  @db.VarChar(255)
  email                 String                  @unique(map: "users_email_unique") @db.VarChar(255)
  email_verified_at     DateTime?               @db.Timestamp(0)
  password              String                  @db.VarChar(255)
  profession            String?                 @db.VarChar(255)
  phone                 String?                 @db.VarChar(255)
  profile               String?                 @db.VarChar(255)
  instagram             String?                 @db.VarChar(255)
  linkedin              String?                 @db.VarChar(255)
  git                   String?                 @db.VarChar(255)
  www                   String?                 @db.VarChar(255)
  deleted_at            DateTime?               @db.Timestamp(0)
  created_at            DateTime?               @db.Timestamp(0)
  updated_at            DateTime?               @db.Timestamp(0)
  birthday              DateTime?               @db.Date
  interest              String?                 @db.VarChar(100)
  user_role_id          BigInt                  @default(4) @db.UnsignedBigInt
  enrollments           enrollments[]
  event_mentors         event_mentors[]
  event_transactions    event_transactions[]
  event_users           event_users[]
  mentors               mentors[]
  subscriptions         subscriptions[]
  user_lessons_progress user_lessons_progress[]
}

enum faqs_product_type {
  general
  course
  event
  bootcamp
}

enum user_lessons_progress_status {
  In_Progress @map("In Progress")
  Completed
}

enum enrollments_status {
  completed
  inprogress
}

enum event_transactions_status {
  pending
  paid
  failed
}

enum courses_status {
  draft
  published
  closed
}

enum subscriptions_status {
  pending
  success
  failed
}

enum courses_level {
  All_Level    @map("All Level")
  Beginner
  Intermediate
  Advance
}

enum courses_type {
  Bootcamp
  Enterprise
  Self_Learning @map("Self Learning")
}
